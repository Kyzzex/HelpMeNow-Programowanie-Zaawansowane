@page "/Loginpage"
@using HelpMeNow.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider authenticationStateProvider


<PageTitle>Login</PageTitle>
<body>
<h3>Zaloguj się</h3>

<EditForm Model="user" OnValidSubmit="LoginUser">
	<DataAnnotationsValidator />
<div class="mb-3">
	<label for="email">Email</label>
	<InputText id="email" @bind-Value="user.Email" class="form-control" />
	<ValidationMessage For="@(() => user.Email)" />
	</div>
	<div class="mb-3">
	<label for="password">Hasło</label>
	<InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
	<ValidationMessage For="@(() => user.Password)" />
	</div>
	<button type="submit" class="btn btn-primary">Zaloguj się</button>
	<div class="text-danger">
	</div>

</EditForm>
<div class="text-danger">
	<span>@message</span>
</div>
</body>

@code {
	private UserLogin user = new UserLogin();
	private string message = string.Empty;

	public async Task<Response<string>> login(UserLogin request)   //-------->JSON Logowanie
	{
		var result = await Http.PostAsJsonAsync("api/auth/login", request);
		return await result.Content.ReadFromJsonAsync<Response<string>>();
	}

	private async Task LoginUser() //---------> Logowanie 
	{
		var result = await login(user);
		if (result.Success)
		{
			message = string.Empty;
			await LocalStorage.SetItemAsync("Token", result.Data);
			await authenticationStateProvider.GetAuthenticationStateAsync();
			navigationManager.NavigateTo("");
		}
		else
		{
			message = result.Message;
		}
	}
}
